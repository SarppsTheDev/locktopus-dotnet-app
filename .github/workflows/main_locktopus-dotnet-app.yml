# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Locktopus .NET App CI/CD

# Define when this workflow should run
on:
  workflow_dispatch: # Allows manual triggering of the workflow
  push:
    branches:
      - 250806-ci-cd-azure

# Environment variables used in the workflow
env:
  AZURE_WEBAPP_NAME: locktopus-dotnet-app
  AZURE_WEBAPP_PACKAGE_PATH: './locktopus_presentation/publish'
  DOTNET_VERSION: '9.x'
  SOLUTION_PATH: 'locktopus_api.sln'
  API_PROJECT_PATH: 'locktopus_presentation'
  DB_PROJECT_PATH: 'locktopus_dataaccess'
  PUBLISH_DIR: './publish'

# Define the separate jobs that make up this workflow
jobs:
  # First job: build and test the application
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest # Use Ubuntu runner for this job

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore
        run: dotnet restore ${{ env.SOLUTION_PATH }}

      - name: Build
        run: dotnet build ${{ env.SOLUTION_PATH }}
          --configuration Release
          --no-restore

    # Uncomment to enable testing when unit tests are available
    # - name: Test
    #   run: dotnet test ${{ env.SOLUTION_PATH }}
    #     --configuration Release
    #     --no-restore
    #     --no-build
    #     --verbosity normal

      - name: Publish
        run: dotnet publish ${{ env.API_PROJECT_PATH }}
          --configuration Release
          --no-restore
          --no-build
          --property:PublishDir=${{ env.PUBLISH_DIR }}

    # Store the published output as an artifact for later jobs
      - name: Publish Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: webapp  # Name of the artifact
          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

  apply-migrations:
    name: Apply EF Core Migrations
    runs-on: ubuntu-latest
    needs: [build-and-test]

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install EF Core CLI tools
        run: dotnet tool install --global dotnet-ef

      - name: Create Migration Bundle
        run: dotnet ef migrations bundle
          --startup-project ${{ env.API_PROJECT_PATH }}
          --project ${{ env.DB_PROJECT_PATH }}
          --context AppDbContext
          --output app-bundle.exe

      - name: Apply App Migrations
        run: ./app-bundle.exe --connection "${{ secrets.AZURE_SQL_CONNECTION_STRING }}"

  # Second job: deploy the application to Azure
  deploy:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    needs: [apply-migrations] # This job depends on the build job
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      # Retrieve the artifacts from the build job
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: webapp
          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

      # Login to Azure using service principal credentials
      # - name: Login to Azure
      #   uses: azure/login@v2
      #   with:
      #     client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_C09B901106E64584BC5A732805D48205 }}
      #     tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_60893FDD04104A6C9AE8DCCC22C96939 }}
      #     subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_A3D3110C9DA141009A4BCDE1755BF7DB }}

      # Deploy to Azure App Service using publish profile credentials
      - name: Deploy
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          # Authentication credentials stored as a secret
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}'